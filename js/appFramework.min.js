
$.app = {};

var app = {
    ctx: null,
    mCtx: null,
    DB_INSTANCE: null,
    online: false,
    lastControllerName: null,
    lastModalName: null,
    langChanged: false,
};


app.system = {

    createSelectors: function (templateHtml) {

        var selectors = {};

        var idList = app.util.System.findStringBetween(templateHtml, 'id="', '"');
        var nameList = app.util.System.findStringBetween(templateHtml, 'name="', '"');


        selectors.names = {};

        $.each(nameList, function (i, name) {

            selectors.names[name] = function(){
                return $('*[name="' + name+'"]');
            }

        });

        $.each(idList, function (i, id) {

            var newId = id + '-' + app.util.System.hash();

            selectors[id] = function (eventsToBind) {

                var selector = $('#' + newId);
                selector.plainId = newId;

                $.each(eventsToBind, function(eventName, eventCallback){

                    if(eventName == 'click'){
                        selector.click(eventCallback);
                    }else if(eventName == 'change'){
                        selector.change(eventCallback);
                    }else {
                        selector.on(eventName, eventCallback);
                    }

                });

                return selector;

            };

            templateHtml = templateHtml.replace('id="'+id+'"', 'id="'+newId+'"');

        });

        return {
            html: templateHtml,
            selectors: selectors
        };
    },

    waitUntilReady: function (_controller, callBack) {

        if (_controller.ready !== true) {
            setTimeout(function () {
                app.system.waitUntilReady(_controller, callBack);
            }, 10);
            return;
        } else {
            callBack();
        }

    },

    waitUntilComponentsReady: function (callBack) {

        if (app.component.componentsReady !== app.component.total) {
            setTimeout(function () {
                app.system.waitUntilComponentsReady(callBack);
            }, 10);
            return;
        } else {
            callBack();
        }

    },

    renderModal: function (_modal, data) {

        if(!_modal.preventScroll){
            $(window).scrollTop(0);
        }


        if(app.mCtx){
            app.lastModalName = _modal.fullName;
        }

        app.system.hideModal();

       // app.system.waitUntilReady(_modal, function () {

            if(_modal.checkNetwork == true){
                app.cordova.checkNetwork();
            }

            app.mCtx = $.extend(true, {}, app.modal[_modal.fullName]);

            if (data == undefined) {
                data = null;
            }

            app.mCtx.render(data);

            if( app.events.onRender !== undefined && app.events.onRender !== null){
                app.events.onRender();
            }


       // });
    },

    renderLastController: function(){
        app.system.render(app.controller[app.lastControllerName]);
    },

    renderLastModal: function(){
        app.system.renderModal(app.modal[app.lastModalName]);
    },

    render: function (_controller, data, callBack) {

      /*  if(app.util.System.isFunction(data)){
            callBack = data;
        }*/

        $(window).scrollTop(0);

        if(app.ctx !== null){
            app.lastControllerName = app.ctx.fullName;
        }

       // app.system.waitUntilReady(_controller, function () {

            app.ctx = $.extend(true, {}, app.controller[_controller.fullName]);

           // app.system.waitUntilComponentsReady(function () {

                app.system.hideModal();

                if(_controller.checkNetwork == true){
                    app.cordova.checkNetwork();
                }

                if (data == undefined) {
                    data = null;
                }

                app.ctx.render(data);

                if( app.events.onRender !== undefined && app.events.onRender !== null){
                    app.events.onRender();
                }


                if(app.ctx.components instanceof Array){

                    $.each(app.ctx.components, function(i, componentName){
                        app.component[componentName].init(data);
                    });

                }else{

                    $.each(app.ctx.components, function(componentName, componentParams){
                        var params = $.app.extendObj(data, componentParams);
                        app.component[componentName].init(params);
                    });


                }

                if(callBack !== undefined) {
                    callBack();
                }



          //  });


        //});
    },

    backPrevious: function(){

        if(app.lastControllerName !== null){
            app.system.render(app.controller[app.lastControllerName]);
        }


    },

    hideModal: function () {

        if (app.mCtx) {
            app.mCtx.hide();
        }

    },


    init: function (callBack) {

        $(document).ready(function () {

            app.cordova.initializeCordova(function () {

                if(app.config.mobileRun){
                    app.cordova.deviceReadyCallBack = function(){
                        app.database.createDB(callBack);
                    };
                }else{
                    app.events.onDeviceReady();
                    app.database.createDB(callBack);
                }

            });

        });


    },

    changeLanguage: function(langCode){
        app.config.lang = langCode;

        console.log(app.config.lang);

        $.each(app.controller, function(controllerName, controllerObj){

            if(controllerName !== 'register'){

                var templateHtml = app.controller[controllerName].plainTemplate
                templateHtml = app.message.replace(templateHtml);
                app.controller[controllerName].template = templateHtml;

            }

        });

        app.system.render(app.controller[app.ctx.fullName], app.ctx.data)

    },

    exit: function(){
        if(app.config.mobileRun){
            navigator.app.exitApp();
        }else{
            console.warn('EXIT APP');
            app.system.hideModal();
        }


    },

    mainRender: function (callBack) {

        if (app.events.onReady !== undefined) {
            console.log('EVENT READY');
            app.events.onReady();
        }

        app.system.render(app.controller[app.config.mainController], null, callBack);

    },

};


app.component = {

    total: 0,
    componentsReady: 0,

    register: function (name, obj) {

        app.component.total++;

        obj.type = 'COMPONENT';
        obj.name = name.substring(0, 1).toLowerCase() + name.substring(1, name.length);
        obj.fullName = name;
        obj.ready = false;

        obj.data = {};

        obj.clean = function(){
            app.component[name].data = {};
        }

        app.component[name] = obj;

       // var tempTemplateId = '#temp-template-' + app.util.System.hash();
       // $('body').append('<div id="' + tempTemplateId.replace('#', '') + '"></div>');

        var templateName = app.config.viewsPath+"/component/" + obj.name + "/" + obj.name + ".view.html";
        var templateHtml = templates[templateName];

        //$(tempTemplateId).html(templateHtml);

        var selectorsObj = app.system.createSelectors(templateHtml);
        app.component[name].selector = selectorsObj.selectors;
        templateHtml = selectorsObj.html;


       // templateHtml = $(tempTemplateId).html();
       // $(tempTemplateId).remove();
        
        app.component[name].template = templateHtml;
        app.component[name].ready = true;
        app.component.componentsReady++;

        /*
        $(tempTemplateId).load(app.config.viewsPath+"/component/" + obj.name + "/" + obj.name + ".view.html", function () {

            var templateHtml = $(tempTemplateId).html();


            var selectorsObj = app.system.createSelectors(templateHtml);
            app.component[name].selector = selectorsObj.selectors;
            templateHtml = selectorsObj.html;

            console.log('COMPONENT '+obj.name);
            console.log(templateHtml);

            app.component[name].template = templateHtml;
            $(tempTemplateId).remove();

            app.component[name].ready = true;

            app.component.componentsReady++;

        });*/

    }

};app.config = {

    mobileRun: false,

    debug: true,

    mockApi: false,

    mainController: "Home",
    viewsPath: 'view',

    lang: "en",

    dbMode: 'create-drop',
    dbTestMode: true,

    dbCreateDropFromScript: true,

    dbCreateScript: 'sql/create.sql',
    dbDropScript: 'sql/drop.sql',

    dbTestScript: 'sqltest.sql',
    dbProductionScript: 'sqlproduction.sql',

    dbName: 'localdb',

    extend: function(configObj){

        for(var prop in configObj){
            app.config[prop] = configObj[prop];
        }

    }

};app.controller = {

    register: function (name, obj) {

        if(obj.components == undefined || obj.components == null){
            obj.components = [];
        }

        if(obj.view == undefined || obj.view == null){
            obj.view = 'main';
        }

        obj.name = name.substring(0, 1).toLowerCase() + name.substring(1, name.length);
        obj.fullName = name;

        obj.render = function (data) {
            $('[view="' + app.ctx.view + '"]').html(obj.template);
            obj.init(data);
        };

        obj.componentsReady = 0;

        if(obj.data == undefined){
            obj.data = {};
        }

        obj.ready = false;
        app.controller[name] = obj;



        var templateName = app.config.viewsPath+"/controller/" + obj.name + "/" + obj.name + ".view.html";
        var templateHtml = templates[templateName];

      //  var tempTemplateId = '#temp-template-' + app.util.System.hash();
       // $('body').append('<div id="' + tempTemplateId.replace('#', '') + '"></div>');
       // $(tempTemplateId).html(templateHtml);

        var selectorsObj = app.system.createSelectors(templateHtml);
        app.controller[name].selector = selectorsObj.selectors;
        templateHtml = selectorsObj.html;

        if(app.controller[name].components instanceof Array){

            $.each(app.controller[name].components, function(i, componentName){
                var _component = app.component[componentName];

                templateHtml = templateHtml.split('<component name="'+_component.name+'"></component>').join(_component.template);
            });


        }else{

            $.each(app.controller[name].components, function(componentName, componentParams){
                var _component = app.component[componentName];
                templateHtml = templateHtml.split('<component name="'+_component.name+'"></component>').join(_component.template);
            });


        }

     //   templateHtml = $(tempTemplateId).html();
      //  $(tempTemplateId).remove();

        app.controller[name].plainTemplate = templateHtml;

        templateHtml = app.message.replace(templateHtml);
        app.controller[name].template = templateHtml;
        app.controller[name].ready = true;

        /*
        $(tempTemplateId).load(app.config.viewsPath+"/controller/" + obj.name + "/" + obj.name + ".view.html", function () {

            var templateHtml = $(tempTemplateId).html();

            var selectorsObj = app.system.createSelectors(templateHtml);

            app.controller[name].selector = selectorsObj.selectors;
            templateHtml = selectorsObj.html;


            if(app.controller[name].components instanceof Array){

                $.each(app.controller[name].components, function(i, componentName){
                    var _component = app.component[componentName];

                    console.log('before split');
                    console.log(templateHtml);
                    templateHtml = templateHtml.split('<component name="'+_component.name+'"></component>').join(_component.template);
                    console.log('after split');
                    console.log(templateHtml);
                });


            }else{

                $.each(app.controller[name].components, function(componentName, componentParams){
                    var _component = app.component[componentName];
                    console.log('before split');
                    console.log(templateHtml);
                    templateHtml = templateHtml.split('<component name="'+_component.name+'"></component>').join(_component.template);
                    console.log('after split');
                    console.log(templateHtml);
                });


            }


            app.controller[name].plainTemplate = templateHtml;

            templateHtml = app.message.replace(templateHtml);
            app.controller[name].template = templateHtml;
            $(tempTemplateId).remove();

            app.controller[name].ready = true;

        });*/

    },

};

$acr = app.controller.register;app.cordova = {

    deviceReadyCallBack: null,

    initializeCordova: function (callBack) {
        app.cordova.bindDOMEvents();
        callBack();
    },

    bindDOMEvents: function () {

        document.addEventListener('deviceready', app.cordova.onDeviceReady, false);
        document.addEventListener('backbutton', app.cordova.onBack, false);

        if (app.events.domEvents !== undefined) {
            app.events.domEvents();
        }

    },

    checkNetwork: function () {

        app.plugins.wrapper.network.connection(function () {
            app.cordova.onOnline();
        }, function () {
            app.cordova.onOffline();
        });

    },


    onBack: function (e) {

        if (e) {
            e.preventDefault();
        }

        if (app.mCtx !== null && app.mCtx.onBack !== undefined) {
            app.mCtx.onBack();
        } else if (app.mCtx !== null && app.mCtx.onBack == undefined) {
            app.system.hideModal();
        } else if (app.ctx !== null && app.ctx.onBack !== undefined) {
            app.system.hideModal();
            app.ctx.onBack();
        }else{

                if (app.events.onBack !== undefined) {
                    app.events.onBack();
                }

        }

    },

    onDeviceReady: function () {

        if (app.cordova.deviceReadyCallBack !== undefined && app.cordova.deviceReadyCallBack !== null) {
            app.cordova.deviceReadyCallBack();
        }

    },

    onOnline: function () {
        app.online = true;

        if (app.events.onOnline !== undefined) {
            app.events.onOnline();
        }

    },

    onOffline: function () {

        app.online = false;

        if (app.events.onOffline !== undefined) {
            app.events.onOffline();
        }

    },

};app.crud = {


    replaceBooleanToString: function(sql){

        sql = sql.split("'true'").join("'bool_true'");
        sql = sql.split("'false'").join("'bool_false'");
        sql = sql.split(" true").join("'bool_true'");
        sql = sql.split(" false").join("'bool_false'");

        return sql;

    },

    execute: function (sql, successCallback, errorCallback) {


        if(typeof sql !== 'string'){
            sql = sql();
        }

        sql = this.replaceBooleanToString(sql);
        console.log(sql);

        var array = [];
        var lastId = null;

        app.DB_INSTANCE.transaction(function (tx) {

            tx.executeSql(sql, [], function (tx,
                                             results) {

                var len = results.rows.length, i;

                for (i = 0; i < len; i++) {

                    var item = results.rows.item(i);
                    array.push(item);

                }

                if(sql.toLowerCase().indexOf('insert') > -1){
                    lastId =  results.insertId;
                }

            }, null);

        }, function (err) {
            if (errorCallback !== undefined) {
                errorCallback();
            }
            console.error(err);
        }, function () {
            if(successCallback !== undefined){

                if(sql.toLowerCase().indexOf('insert') != -1){
                    successCallback(lastId);
                }else{
                    successCallback(array);
                }


            }
        });

    },

    builder: {

        findById: function(tableName, id){
            return "select * from "+tableName+" where id = "+id;
        },

        deleteById: function(tableName, id){
            return "delete from "+tableName+" where id = "+id;
        },

        drop: function (tableName) {
            return 'DROP TABLE IF EXISTS ' + tableName;
        },

        count: function(tableName){
            return 'select count(*) as count from '+tableName;
        },

        create: function (tableName, columns) {

            var sql = 'CREATE TABLE IF NOT EXISTS ' + tableName + ' (id INTEGER PRIMARY KEY';

            for (var i = 0; i < columns.length; i++) {
                sql += ', ' + columns[i];
            }

            sql += ')';

            return sql;
        },

        findAll: function (tableName) {
            return 'SELECT * FROM ' + tableName;
        },

        select: function (tableName, values, columns) {

            var sql = "";


                sql = "select * from " + tableName + " where ";


            for (var i = 0; i < values.length; i++) {

                if(typeof values[i] == 'string' || typeof values[i] == 'boolean'){
                    sql +=  ' '+columns[i]+"='"+values[i] + "' and ";
                }else{
                    sql +=  ' '+columns[i]+"="+values[i] + " and ";
                }






            }

            sql = sql.substr(0, sql.length - 4);

            return sql;

        },

        insert: function (tableName, values, columns) {

            var sql = "";

            if(columns !== undefined){

                sql = "INSERT INTO " + tableName + " (";

                for (var i = 0; i < columns.length; i++) {
                    sql += columns[i] + ',';
                }

                sql = sql.substr(0, sql.length - 1);

                sql += ") VALUES (";

            }else{
                sql = "INSERT INTO " + tableName + " VALUES (";
            }


            for (var i = 0; i < values.length; i++) {

                if(typeof values[i] == 'string' || typeof values[i] == 'boolean'){
                    sql +=  " '"+values[i] + "',";
                }else{
                    sql +=  " "+values[i] + ",";
                }


            }

            sql = sql.substr(0, sql.length - 1);

            sql += ")";

            return sql;

        },

        update: function (tableName, id, values, columns) {

            var sql = "";

            sql = "UPDATE " + tableName + " SET ";


            for (var i = 0; i < values.length; i++) {

                if(typeof values[i] == 'string' || typeof values[i] == 'boolean'){
                    sql +=  ' '+ columns[i]+"= '"+values[i] + "',";
                }else{
                    sql += ' '+columns[i]+"= "+values[i] + ",";
                }


            }

            sql = sql.substr(0, sql.length - 1);

            sql += " where id = "+id;

            return sql;

        }


    }

};app.dbTablesCount = 0;

var DB_INSTANCE = null;

app.database = {

    dbName: '',
    dbVersion: '1.0',
    dbSize: 2097152,

    createDB: function (callBack) {

        app.database.dbName = app.config.dbName;

        if (app.config.dbMode == 'none') {

            app.DB_INSTANCE = null;
            app.system.mainRender(callBack);

        } else {

            if (app.config.mobileRun) {

               app.DB_INSTANCE = window.sqlitePlugin.openDatabase({ name: app.database.dbName, location: 'default' });

            } else {
                app.DB_INSTANCE = openDatabase(app.database.dbName, app.database.dbVersion, app.database.dbName + '_manager', app.database.dbSize);
            }


            if (app.config.dbMode == 'create-drop') {

                app.database.dbDrop(function () {
                    app.database.dbCreate(function () {

                        console.log('DB created');
                        app.database.dbLoadData(function () {

                            console.log('DB loaded');
                            app.system.mainRender(callBack);

                        });

                    });
                });

            } else if (app.config.dbMode == 'create') {

                   console.log('create db 222');
                    app.database.dbCreate(function () {
                        console.log('created db');
                        app.database.dbLoadData(function () {
                            app.system.mainRender(callBack);
                        });
                    });

            }

        }

    },

    dbLoadData: function (callBack) {

        var finished = false;

        if (app.config.dbTestMode) {

            console.log('xxx');

            $.get(app.config.dbTestScript, function (data) {

                if (data.trim().length == 0) {
                    console.log('callback 2');
                    finished = true;
                    callBack();
                } else {

                    var queries = [];
                    var splitted = data.split(';');


                    for (var i = 0; i < splitted.length; i++) {

                        if (splitted[i].trim().length > 0) {
                            queries.push(splitted[i].trim());
                        }

                    }


                    for (var i = 0; i < queries.length; i++) {


                        app.crud.execute(queries[i], function (data) {

                            app.dbTablesCount++;

                            if (app.dbTablesCount >= queries.length) {
                                app.dbTablesCount = 0;

                                if (!finished) {
                                    console.log('callback 1');
                                    finished = true;
                                    callBack();

                                }

                            }

                        });

                    }

                }


            });

        } else {

            $.get(app.config.dbProductionScript, function (data) {

                if (data.trim().length == 0) {
                    console.log('callback 3');
                    finished = true;
                    callBack();

                } else {

                    var queries = [];
                    var splitted = data.split(';');

                    for (var i = 0; i < splitted.length; i++) {
                        if (splitted[i].trim().length > 0) {
                            queries.push(splitted[i].trim());
                        }
                    }

                    for (var i = 0; i < queries.length; i++) {

                        app.crud.execute(queries[i], function (data) {

                            app.dbTablesCount++;

                            if (app.dbTablesCount >= queries.length) {
                                app.dbTablesCount = 0;

                                if (!finished) {
                                    console.log('callback 4');
                                    finished = true;
                                    callBack();

                                }

                            }

                        });

                    }

                }


            });

        }

    },

    dbCreate: function (callBack) {


        if (app.config.dbCreateDropFromScript) {

            $.get(app.config.dbCreateScript, function (data) {

                if (data.trim().length == 0) {
                    callBack();
                } else {

                    var queries = [];
                    var splitted = data.split(';');

                    for (var i = 0; i < splitted.length; i++) {
                        if (splitted[i].trim().length > 0) {
                            queries.push(splitted[i].trim());
                        }
                    }

                    for (var i = 0; i < queries.length; i++) {

                        app.crud.execute(queries[i], function (data) {

                            app.dbTablesCount++;

                            if (app.dbTablesCount >= queries.length) {
                                app.dbTablesCount = 0;
                                callBack();
                            }

                        });

                    }

                }


            });

        } else {

            console.log('from model');
            for (var i = 0; i < app.model.createScripts.length; i++) {

                console.log(app.model.createScripts);

                app.crud.execute(app.model.createScripts[i], function (data) {

                    app.dbTablesCount++;

                    if (app.dbTablesCount == app.model.createScripts.length) {
                        app.dbTablesCount = 0;
                        callBack();
                    }

                });

            }

        }


    },

    dbDrop: function (callBack) {


        if (app.config.dbCreateDropFromScript) {

            $.get(app.config.dbDropScript, function (data) {

                if (data.trim().length == 0) {
                    callBack();
                } else {

                    var queries = [];
                    var splitted = data.split(';');

                    for (var i = 0; i < splitted.length; i++) {
                        if (splitted[i].trim().length > 0) {
                            queries.push(splitted[i].trim());
                        }
                    }

                    for (var i = 0; i < queries.length; i++) {

                        app.crud.execute(queries[i], function (data) {

                            app.dbTablesCount++;

                            if (app.dbTablesCount >= queries.length) {
                                app.dbTablesCount = 0;
                                callBack();
                            }

                        });
                    }
                }

            });

        } else {

            for (var i = 0; i < app.model.dropScripts.length; i++) {

                app.crud.execute(app.model.dropScripts[i], function (data) {

                    app.dbTablesCount++;

                    if (app.dbTablesCount == app.model.dropScripts.length) {
                        app.dbTablesCount = 0;
                        callBack();
                    }

                });

            }

        }


    }


};
app.enumerator = {

    register: function(name, list){
        app.enumerator[name] = list;
    }

};app.events = {

    domEvents: function(){

    },

    onOnline: function(){

    },

    onOffline: function(){

    },

    onBack: function(){

    },

    onDeviceReady: function(){

    },

    onReady: function(){

    },

    extend: function(eventName, eventCallback){

        if(eventName == "render"){
            eventName = "onRender";
        }

        if(eventName == "offline"){
            eventName = "onOffline";
        }

        if(eventName == "online"){
            eventName = "onOnline";
        }

        if(eventName == "dom"){
            eventName = "domEvents";
        }

        if(eventName == "back"){
            eventName = "onBack";
        }

        if(eventName == 'ready'){
            eventName = 'onReady'
        }

        app.events[eventName] = eventCallback;

    }


};app.global = {

    define: function(name, value){


        app.global[name] = {

            get: function(){
                return window[name];
            },

            set: function(val){
                window[name] = val;
            }

        };

        window[name] = value;

    },

    defineMap: function(hashMap){


        $.each(hashMap, function(i, _global){
            app.global.define(_global.name, _global.initial);
        });


    },


};app.message = {

    messages: null,

    define: function(object){
        app.message.messages = object;
    },

    get: function(_message){
        for(prop in  app.message.messages){
            if(prop.toString() == _message){
                for(prop2 in  app.message.messages[prop]){
                    if(prop2.toString() ==  app.config.lang){
                        return  app.message.messages[prop][prop2];
                    }
                }
            }
        }

    },

    replace: function(html){

        for(prop in  app.message.messages){
            html = html.split('msg('+prop.toString()+')').join( app.message.messages[prop][ app.config.lang]);
        }

        return html;

    },

};app.modal = {

    register: function (name, obj) {

        obj.name = name.substring(0, 1).toLowerCase() + name.substring(1, name.length);
        obj.fullName = name;

        obj.data = {};
        obj.ready = false;
        //obj = obj;

      //  var tempTemplateId = '#temp-template-' +  app.util.System.hash();
      //  $('body').append('<div id="' + tempTemplateId.replace('#', '') + '"></div>');

        var templateName = app.config.viewsPath+"/modal/" + obj.name + "/" + obj.name + ".view.html";
        var templateHtml = templates[templateName];

        var tempTemplateId = '#temp-template-' +  app.util.System.hash();
        $('body').append('<div id="' + tempTemplateId.replace('#', '') + '"></div>');

        $(tempTemplateId).html(templateHtml);

        var modalSelector = $('[mainmodal]');
        var newModalId = 'modal-' +  app.util.System.hash();
        modalSelector.attr('modalselector', newModalId);

        obj.id = newModalId;
        obj.selfSelector = function(){
            return $('[modalselector="'+newModalId+'"]');
        }

        obj.show = function () {

            $('body').removeClass('modal-open');

            var backgroundModalSelector = $('.modal-backdrop');

            if(backgroundModalSelector && backgroundModalSelector.length > 1){
                $(backgroundModalSelector[0]).fadeOut(200, function(){ $(this).remove();});
            }

            obj.selfSelector().modal('show');

            obj.selfSelector().on('hidden.bs.modal', function () {

                console.log('hide2');
                if(app.mCtx.onHide){
                    app.mCtx.onHide();
                }

                obj.forceHide();


            });

        };

        obj.hide = function (callBack) {

            if(!obj.preventDismiss){
                console.log('hide1');
                obj.forceHide();
            }


        };

        obj.render = function (data) {


            $('[modal="' + obj.name + '"]').html(obj.template);

            if(obj.preventDismiss){
                obj.selfSelector().modal({
                    backdrop: 'static',
                    keyboard: false
                });

            }else{
                obj.selfSelector().modal();
            }


            obj.init(data);
            obj.show();

        };

        obj.forceHide = function(){

            console.log('force hide');

            $('body').removeClass('modal-open');
            $('.modal-backdrop').remove();
            $('[modal="' + obj.name + '"]').html('');
            app.mCtx = null;

        }

        templateHtml =  $(tempTemplateId).html();
        $(tempTemplateId).remove();

        var selectorsObj =  app.system.createSelectors(templateHtml);

        obj.selector = selectorsObj.selectors;
        templateHtml = selectorsObj.html;
        templateHtml = app.message.replace(templateHtml);

        obj.template = templateHtml;


        obj.ready = true;

        app.modal[name] = obj;



    },

};app.model = {

    createScripts: [],
    dropScripts: [],

    define: function (name, fieldList) {

        var columnsWithId = $.app.copyArray(fieldList).unshift('id');
        var nameUpperCase = name.toUpperCase();
        var dropTableSql =  app.crud.builder.drop(nameUpperCase);
        var createTableSql =  app.crud.builder.create(nameUpperCase, fieldList);
        var findAllSql =  app.crud.builder.findAll(nameUpperCase);

        app.model.createScripts.push(createTableSql);
        app.model.dropScripts.push(dropTableSql);

        var obj = {

            table: nameUpperCase,
            name: nameUpperCase,
            columns: fieldList,
            columnsAll: columnsWithId,
            dropSQL: dropTableSql,
            createSQL: createTableSql,
            findAllSQL: findAllSql,

            new: function (objList) {

                var modelObj = {};

                for (var i = 0; i < this.columns; i++) {

                    if (objList[this.columns[i]] !== undefined) {
                        modelObj[this.columns[i]] = objList[this.columns[i]];
                    } else {
                        modelObj[this.columns[i]] = null;
                    }

                }

                return modelObj;

            },


        }

        app.model[name] = obj;

    }
};app.plugins = {

    wrapper : {},

    wrapList: function(wrapList){

        app.plugins.wrapper = $.extend(true, app.plugins.wrapper, wrapList);

    },

    wrap: function(pluginName, wrapper){

        app.plugins.wrapper[pluginName] = wrapper;

    },



};
app.query = {

    defineList: function(list){

        $.each(list, function(i, queryObj){
            app.query.define(queryObj.name, queryObj.sql, queryObj.group);
        });

    },

    define: function(name, sql, group){

        var obj = {

            sql: sql,
            bind: function(valueListOrObj){

                var sql = this.sql;

                if(valueListOrObj instanceof Array) {

                    for (var i = 0; i < valueListOrObj.length; i++) {

                        if (typeof valueListOrObj[i] == 'string') {
                            sql = sql.replace('?', "'" + valueListOrObj[i] + "'");
                        } else {
                            sql = sql.replace('?', valueListOrObj[i]);
                        }

                    }

                }else{

                    for(var fieldName in valueListOrObj){

                        var fieldValue = valueListOrObj[fieldName];

                        if (typeof fieldValue == 'string') {
                            sql = sql.replace(':'+fieldName, "'" + valueListOrObj[i] + "'");
                        } else {
                            sql = sql.replace(':'+fieldName, fieldValue);
                        }

                    }

                }


                return sql;

            },

            execute: function(valueList, successCallback, errorCallback){

                var sqlToExecute = this.sql;

                if(valueList !== undefined){
                    sqlToExecute = this.bind(valueList);
                }

                app.crud.execute(sqlToExecute, successCallback, errorCallback);
            }



        }

        if(group == undefined){

            app.query[name] = obj;

        }else{

            if(app.query[group] == undefined){
                app.query[group] = {};
            }

            app.query[group][name] = obj;
        }

    }

};

$aql = app.query.defineList;
$aqd = app.query.define;app.rest = {

    spinnerShow: function(){
    },

    spinnerHide: function(){
    },

    get: function (url, successCallback, errorCallback, urlParams, headers) {
        app.rest.getDelete(url, 'GET', successCallback, errorCallback, urlParams, headers);
    },

    delete: function (url, successCallback, errorCallback, urlParams, headers) {
        app.rest.getDelete(url, 'DELETE', successCallback, errorCallback, urlParams, headers);
    },

    update: function (url, request, successCallback, errorCallback, urlParams, headers) {
        app.rest.postPut(url, 'PUT', request, successCallback, errorCallback, urlParams, headers);
    },

    post: function (url, request, successCallback, errorCallback, urlParams, headers) {
        app.rest.postPut(url, 'POST', request, successCallback, errorCallback, urlParams, headers);
    },

    isMock: function(url, method, request, successCallback, callBackIsnt){

        if(app.config.mockApi){
            var result = app.mock.execByUrl(url, method, request);
            successCallback(result);
        }else{
            callBackIsnt();
        }

    },

    getDelete: function (url, method, successCallback, errorCallback, urlParams, headers) {

        app.rest.isMock(url, method, urlParams, successCallback, function(){

            var preparedUrl = null;

            if(urlParams !== undefined && urlParams !== null){
                preparedUrl = app.util.System.prepareUrl(url, urlParams);
            }else{
                preparedUrl = url;
            }

            $.ajax({
                url: preparedUrl,
                type: method,
                beforeSend: function () {
                    app.rest.spinnerShow(url);
                },
                complete: function () {
                    app.rest.spinnerHide(url);
                },
                headers: headers,
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (data, textStatus, jqXHR) {
                    successCallback(data);
                },
                error: function (jqXHR, textStatus, errorThrown) {

                    if(errorCallback !== undefined){

                        console.log(jqXHR);

                        errorCallback(jqXHR.responseJSON, jqXHR.status, jqXHR);

                    }

                }
            });


        });



    },

    postPut: function (url, method, request, successCallback, errorCallback, urlParams, headers) {

        app.rest.isMock(url, method, request, successCallback, function(){

            console.log(headers);

            var preparedUrl = null;

            if(urlParams !== undefined && urlParams !== null){
                preparedUrl = app.util.System.prepareUrl(url, urlParams);
            }else{
                preparedUrl = url;
            }

            var jsonData = JSON.stringify(request);

            $.ajax({
                url: preparedUrl,
                type: method,
                beforeSend: function () {
                    app.rest.spinnerShow(url);
                },
                complete: function () {
                    app.rest.spinnerHide(url);
                },
                headers: headers,
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                data: jsonData,
                success: function (data, textStatus, jqXHR) {
                    successCallback(data);
                },
                error: function (jqXHR, textStatus, errorThrown) {

                    if(errorCallback !== undefined){

                        console.log(jqXHR);

                        errorCallback(jqXHR.responseJSON, jqXHR.status, jqXHR);

                    }

                }
            });

        });

    }


};app.service = {
    register: function (name, obj) {
        app.service[name] = obj;
    }
};app.util = {
    register: function (name, obj) {
        app.util[name] = obj;
    },

    System: {

        isFunction: function (functionToCheck) {
            var getType = {};
            return functionToCheck && getType.toString.call(functionToCheck) === '[object Function]';
        },
        
        parseJSON: function(s){

            s = s.replace(/\\n/g, "\\n")
                .replace(/\\'/g, "\\'")
                .replace(/\\"/g, '\\"')
                .replace(/\\&/g, "\\&")
                .replace(/\\r/g, "\\r")
                .replace(/\\t/g, "\\t")
                .replace(/\\b/g, "\\b")
                .replace(/\\f/g, "\\f");
            s = s.replace(/[\u0000-\u0019]+/g,"");
            var o = JSON.parse(s);

            return o;
        },

        isNull: function(obj){

            if(obj == undefined || obj == null){
                return true;
            }

            return false;

        },

        prepareUrl: function(url, params){

            for(var prop in params){
                url = url.replace('{'+prop+'}', params[prop]);
            }

            return url;

        },

        findStringBetween: function (str, first, last) {

            var r = new RegExp(first + '(.*?)' + last, 'gm');
            var arr = str.match(r);

            if (arr == null || arr.length == 0) {
                return [];
            }

            var arr2 = [];

            for (var i = 0; i < arr.length; i++) {
                arr2.push(arr[i].replace(first, '').replace(last, ''));
            }

            return arr2;

        },

        hash: function () {
            var text = "";
            var possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";

            for (var i = 0; i < 5; i++)
                text += possible.charAt(Math.floor(Math.random() * possible.length));

            return text;
        }

    }
};
app.mock = {

    api: {},

    execByUrl: function(url, method, request){

        for(prop in app.mock.api){
            if(app.mock.api[prop].url == url){
                return app.mock.api[prop].exec(request);
            }
        }

    },

    execByName: function(name, method, request){

        for(prop in app.mock.api){
            if((prop == name) && (app.mock.api[prop].method == method.toLowerCase())){
                return app.mock.api[prop].exec(request);
            }
        }

    },

    registerList: function(mockList){

        $.each(mockList, function(i, mockObj){
           app.mock.register(mockObj.name, mockObj.url, mockObj.method, mockObj.returning);
        });

    },

    register: function(name, url, method, returning){

        var urlVal = null;

        if(typeof url == 'string'){
            urlVal = url;
        }else{
            urlVal = url();
        }

        app.mock.api[name] = {
            url: urlVal,
            method: method,
            exec: returning
        }

    },


};app.renderer = {

    define: function(name, template, renderPerContext){

        var htmlTemplate = null;

        if(renderPerContext == undefined || renderPerContext == null){
            renderPerContext = false;
        }

        if(renderPerContext == false){
            htmlTemplate = template();
        }else{
            htmlTemplate = template;
        }

        htmlTemplate = app.message.replace(htmlTemplate);

        var obj = {

            renderPerContext: renderPerContext,
            template: htmlTemplate,
            dataIds: null,
            bindings: null,
            listSelector: null,
            data: null,

            update: function(eCtx, compareField){

                var _this = this;

                $.each(this.dataIds, function(i, listObj){

                    if(listObj.context[compareField] == eCtx[compareField]){

                        _this.dataIds[i].context = eCtx;
                        _this.data[i] = eCtx;

                        var template = '';
                        if(_this.renderPerContext){
                            template = _this.template(i, eCtx);
                        }else{
                            template = _this.template();
                        }

                        var newListElementHtml = _this.renderElement(listObj.dataId, listObj.listElementId, template, listObj.context);

                        for(var prop in _this.bindings){
                            newListElementHtml = newListElementHtml.split('event('+prop+')').join('event="'+prop+'"');
                        }

                        $('*[liId="'+listObj.listElementId+'"]').replaceWith(newListElementHtml);

                    }

                });

            },

            renderElement: function(dataId, listElementId, html, element){

                html = html.replace('>', ' liId="'+listElementId+'" >');
                html = html.split('event(').join(' dataId="'+dataId+'" event(');

                for(var prop in element){
                    html = html.split('text('+prop+')').join(element[prop]);
                }

                return html;

            },

            render: function(listSelector, data, bindings){

                var _this = this;

                var elementsHtml = [];

                var dataIds = [];

                var templatehtml = this.template;

                var html = templatehtml;

                var renderPerContext = this.renderPerContext;

                $.each(data, function(i, element){

                    if(renderPerContext){
                        html = templatehtml(i, element);
                    }

                    var listElementId = 'li-'+app.util.System.hash()+'-'+app.util.System.hash()+'-'+app.util.System.hash();
                    var dataId = 'element-'+app.util.System.hash()+'-'+app.util.System.hash()+'-'+app.util.System.hash();

                    html = _this.renderElement(dataId, listElementId, html, element);

                    dataIds.push({
                        listElementId: listElementId,
                        dataId: dataId,
                        context: element
                    });

                    elementsHtml.push(html);

                    html = templatehtml;

                });

                html = '';

                for(var i = 0;i<elementsHtml.length;i++){
                    html += elementsHtml[i];
                }

                for(var prop in bindings){
                    html = html.split('event('+prop+')').join('event="'+prop+'"');
                }

                listSelector.html(html);

                this.bindings = bindings;
                this.listSelector = listSelector;
                this.data = data;
                this.bind(listSelector, dataIds, bindings, data);

            },

            bind: function(listSelector, dataIds, bindings, dataList){

                var dataIdsLocal = dataIds;

                listSelector.unbind();
                $.each(bindings, function(functionName, functionCallback){

                    listSelector.on('click', '[event="'+functionName+'"]', function(e){

                        var arrtributeDataId = $(e.currentTarget).attr('dataId');

                        $.each(dataIdsLocal, function(i, dataId){

                            if(dataId.dataId == arrtributeDataId){
                                e.eCtx = dataId.context;

                                var selector = $('*[dataId="' + dataId.dataId+'"]');
                                selector.dataId = dataId.dataId;
                                e.eCtxSelector = function(){
                                    return selector;
                                }
                            }

                        });

                        e.eCtxList = dataList;

                        functionCallback(e);

                    });

                });

                this.dataIds = dataIdsLocal;


            }


        }


        app.renderer[name] = obj;

    }

};